---
import Layout from "../layouts/Layout.astro";
import { supabaseServerClient } from "../db/supabase.server";
import type { ImportListItemDTO } from "../types";
import { ToastProvider, Toaster } from "../components/hooks/useToast";
import { Button } from "../components/ui/button";
import { 
  Table, 
  TableBody, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from "../components/ui/table";
import { Card, CardContent, CardHeader, CardTitle } from "../components/ui/card";

// Ochrona przed dostępem niezalogowanych użytkowników
const supabase = supabaseServerClient(Astro);
const { data: { session } } = await supabase.auth.getSession();

if (!session) {
  return Astro.redirect("/login");
}

// Pobranie listy importów z API
const response = await fetch(`${Astro.url.origin}/api/imports`, {
  headers: {
    Cookie: Astro.request.headers.get("cookie") || ""
  }
});

const json = await response.json();
const imports: ImportListItemDTO[] = json.data || [];

// Formatowanie daty
const formatDate = (dateString: string) => {
  return new Date(dateString).toLocaleString("pl-PL", {
    year: "numeric",
    month: "long",
    day: "numeric", 
    hour: "2-digit", 
    minute: "2-digit"
  });
};
---

<Layout title="Historia importów">
  <div class="container mx-auto px-4 py-8">
    <ToastProvider client:load>
      <div class="flex items-center justify-between mb-6">
        <div>
          <h1 class="text-2xl font-bold">Historia importów</h1>
          <p class="text-slate-500 mt-1">
            Lista wszystkich importowanych plików
          </p>
        </div>
        <a href="/imports-upload">
          <Button client:load>Nowy import</Button>
        </a>
      </div>

      {imports.length > 0 ? (
        <Card>
          <CardHeader>
            <CardTitle>Zaimportowane pliki ({imports.length})</CardTitle>
          </CardHeader>
          <CardContent>
            <div class="overflow-x-auto">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Nazwa pliku</TableHead>
                    <TableHead>Platforma</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Data importu</TableHead>
                    <TableHead className="text-right">Akcje</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {imports.map((importItem) => (
                    <TableRow key={importItem.id}>
                      <TableCell className="font-medium">{importItem.original_filename}</TableCell>
                      <TableCell>{importItem.platform_name}</TableCell>
                      <TableCell>
                        {importItem.status === "completed" && (
                          <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                            Zakończony
                          </span>
                        )}
                        {importItem.status === "failed" && (
                          <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800" title={importItem.error_message || ""}>
                            Błąd
                          </span>
                        )}
                        {importItem.status === "pending" && (
                          <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800">
                            Oczekujący
                          </span>
                        )}
                        {importItem.status === "processing" && (
                          <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
                            Przetwarzanie
                          </span>
                        )}
                      </TableCell>
                      <TableCell>{formatDate(importItem.created_at)}</TableCell>
                      <TableCell className="text-right">
                        <a href={`/imports/${importItem.id}`} class="text-blue-600 hover:text-blue-800 mr-4">
                          Szczegóły
                        </a>
                        <button
                          data-import-id={importItem.id}
                          class="text-red-600 hover:text-red-900 delete-import-btn"
                        >
                          Usuń
                        </button>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          </CardContent>
        </Card>
      ) : (
        <Card>
          <CardContent className="text-center py-12">
            <p className="text-slate-600 mb-4">Brak zaimportowanych danych</p>
            <a href="/imports-upload">
              <Button client:load>Importuj dane</Button>
            </a>
          </CardContent>
        </Card>
      )}
      
      <Toaster client:load />
    </ToastProvider>
  </div>
</Layout>

<script>
  // Obsługa usuwania importów
  document.addEventListener("DOMContentLoaded", () => {
    const deleteButtons = document.querySelectorAll(".delete-import-btn");
  
    deleteButtons.forEach(button => {
      button.addEventListener("click", async () => {
        const importId = button.getAttribute("data-import-id");
        if (!importId) return;
  
        if (confirm("Czy na pewno chcesz usunąć ten import?")) {
          try {
            const response = await fetch(`/api/imports/${importId}`, {
              method: "DELETE",
            });
  
            if (response.ok) {
              // Usuń wiersz z tabeli
              const row = button.closest("tr");
              if (row) row.remove();
              
              // Wyświetl informację o sukcesie
              const event = new CustomEvent('toast', {
                detail: {
                  title: 'Sukces',
                  description: 'Import został usunięty',
                  variant: 'default'
                }
              });
              window.dispatchEvent(event);
  
              // Odśwież stronę jeśli to był ostatni import
              const tbody = document.querySelector("tbody");
              if (tbody && tbody.children.length === 0) {
                window.location.reload();
              }
            } else {
              const errorData = await response.json();
              throw new Error(errorData.error || "Nie udało się usunąć importu");
            }
          } catch (error) {
            console.error("Błąd podczas usuwania importu:", error);
            
            // Wyświetl informację o błędzie
            const event = new CustomEvent('toast', {
              detail: {
                title: 'Błąd',
                description: error instanceof Error ? error.message : String(error),
                variant: 'destructive'
              }
            });
            window.dispatchEvent(event);
          }
        }
      });
    });
  });
</script> 