---
import Layout from "../layouts/Layout.astro";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Alert } from "@/components/ui/alert";
import {
  AlertTriangle,
  Clock,
  Download,
  Upload,
  BrainCircuit,
  Settings,
  Home,
  LineChart,
  Bell,
  Calendar as CalendarIconLucide,
} from "lucide-react";
import PlatformTabs from "@/components/PlatformTabs.tsx";
import type { DashboardMetricsResponse, SelectOption } from "../types";
// import { DatePicker } from "@/components/DatePicker.tsx";
import { DropdownSelect } from "@/components/DropdownSelect.tsx";

// Sprawdzenie sesji (middleware powinno już przekierować niezalogowanych)
const { session } = Astro.locals;
if (!session) {
  return Astro.redirect("/login");
}

// Dane użytkownika
const userFullName = session.user?.user_metadata?.full_name || session.user?.email || "Użytkownik";

// Zmienne na dane organizacji i błędy inicjalizacji
let organizationId: string | undefined;
// let initialError: string | null = null; // Zakomentowane - nieużywane

if (!Astro.locals.supabase) {
  // initialError = "Błąd inicjalizacji usługi bazy danych. Skontaktuj się z administratorem."; // Zakomentowane
} else {
  // Pobieranie organizacji użytkownika (w MVP zakładamy, że użytkownik ma tylko jedną organizację)
  const { data: userOrgs, error: userOrgsError } = await Astro.locals.supabase
    .from("user_organizations")
    .select("organization_id")
    .eq("user_id", session.user.id)
    .limit(1);

  if (userOrgsError) {
    // initialError = "Błąd podczas pobierania organizacji użytkownika."; // Zakomentowane
    // console.error("Error fetching user organizations:", userOrgsError);
  } else {
    organizationId = userOrgs?.[0]?.organization_id;
  }
}

// Pobieranie domyślnych danych z API (ostatnie 7 dni)
const today = new Date();
const sevenDaysAgo = new Date(today);
sevenDaysAgo.setDate(today.getDate() - 7);

// Stan dla filtrów
let dateFromState = Astro.url.searchParams.get("dateFrom") || sevenDaysAgo.toISOString().split("T")[0];
let dateToState = Astro.url.searchParams.get("dateTo") || today.toISOString().split("T")[0];
let selectedPlatformState = Astro.url.searchParams.get("platform") || "all";
let selectedCampaignState = Astro.url.searchParams.get("campaign") || "all";

// Przykładowe opcje dla filtrów
const platformOptions: SelectOption[] = [
  { value: "all", label: "Wszystkie platformy" },
  { value: "google", label: "Google Ads" },
  { value: "meta", label: "Meta Ads" },
  // Można dodać więcej platform dynamicznie
];

// Na razie kampanie będą statyczne, docelowo powinny być pobierane na podstawie wybranej platformy i dat
const campaignOptions: SelectOption[] = [
  { value: "all", label: "Wszystkie kampanie" },
  // Przykładowe kampanie (powinny być dynamiczne)
  { value: "campaign1", label: "Kampania Google 1" },
  { value: "campaign2", label: "Kampania Meta 1" },
];

let metricsData: DashboardMetricsResponse | null = null;
let error: string | null = null;

if (!Astro.locals.supabase) {
  error = "Błąd inicjalizacji usługi bazy danych. Skontaktuj się z administratorem.";
} else if (organizationId) {
  try {
    const apiUrl = new URL(`/api/dashboard/metrics`, Astro.url.origin);
    apiUrl.searchParams.set("organization_id", organizationId);
    apiUrl.searchParams.set("dateFrom", dateFromState);
    apiUrl.searchParams.set("dateTo", dateToState);
    if (selectedPlatformState !== "all") {
      apiUrl.searchParams.set("platform", selectedPlatformState);
    }
    if (selectedCampaignState !== "all") {
      apiUrl.searchParams.set("campaign_id", selectedCampaignState);
    }

    const response = await fetch(apiUrl.toString(), {
      headers: {
        "Content-Type": "application/json",
      },
    });

    if (!response.ok) {
      const errorData = await response.json();
      error = errorData.error || "Błąd pobierania danych";
    } else {
      metricsData = await response.json();
    }
  } catch /* (err) */ {
    error = "Błąd połączenia z serwerem";
    // console.error("Error fetching dashboard metrics:", err);
  }
}

// Funkcja formatująca liczby do wyświetlenia
function formatMetric(value: number | undefined | null, type = "number"): string {
  if (value === undefined || value === null) return "-";

  if (type === "currency") {
    return `${value.toFixed(2)} PLN`;
  } else if (type === "percentage") {
    return `${(value * 100).toFixed(2)}%`;
  } else if (type === "decimal") {
    return value.toFixed(2);
  }

  return value.toString();
}

// Metryki z API lub przykładowe jeśli brak danych
const summaryMetrics = metricsData?.summaryMetrics || {
  ctr: 0.0238,
  cpc: 1.24,
  impressions: 0,
  clicks: 0,
  spend: 0,
  conversions: 583,
  cost_per_conversion: 32.18,
  roas: 3.75,
  revenue: 0,
};

// Symulowane zmiany (placeholder - w pełnej implementacji będą pobierane z API)
const metrics = {
  cpc: {
    value: formatMetric(summaryMetrics.cpc, "currency"),
    change: "+5.2%",
    trend: "up" as const,
  },
  ctr: {
    value: formatMetric(summaryMetrics.ctr, "percentage"),
    change: "-0.7%",
    trend: "down" as const,
  },
  konwersje: {
    value: formatMetric(summaryMetrics.conversions),
    change: "+12.3%",
    trend: "up" as const,
  },
  kosztKonwersji: {
    value: formatMetric(summaryMetrics.cost_per_conversion, "currency"),
    change: "-4.1%",
    trend: "up" as const,
  },
  roas: {
    value: formatMetric(summaryMetrics.roas, "decimal"),
    change: "+1.2%",
    trend: "up" as const,
  },
};

// Przykładowe alerty
const alerts = [
  {
    id: 1,
    campaign: "Lato 2023 - Buty",
    platform: "Google Ads",
    issue: "Wysoki koszt konwersji",
    value: "47.21 PLN",
    threshold: "35.00 PLN",
    severity: "high",
  },
  {
    id: 2,
    campaign: "Promocja - Plecaki",
    platform: "Meta Ads",
    issue: "Niski CTR",
    value: "0.82%",
    threshold: "1.5%",
    severity: "medium",
  },
  {
    id: 3,
    campaign: "Back to School",
    platform: "Google Ads",
    issue: "Spadek ROAS",
    value: "2.1",
    threshold: "3.0",
    severity: "high",
  },
];

// Przykładowe nadchodzące weryfikacje
const upcomingVerifications = [
  {
    id: 1,
    campaign: "Lato 2023 - Buty",
    platform: "Google Ads",
    change: "Zwiększenie budżetu o 20%",
    implementation: "2023-08-15",
    verification: "2023-08-22",
  },
  {
    id: 2,
    campaign: "Promocja - Akcesoria",
    platform: "Meta Ads",
    change: "Nowe targetowanie demograficzne",
    implementation: "2023-08-18",
    verification: "2023-08-25",
  },
];

// Formatowanie wybranego okresu - użyjemy dateFromState i dateToState
const formattedDateRange = `${new Date(dateFromState).toLocaleDateString("pl-PL")} - ${new Date(dateToState).toLocaleDateString("pl-PL")}`;
---

<Layout title="Dashboard | campAlyze">
  <div class="flex h-screen overflow-hidden bg-gray-100">
    <!-- Sidebar -->
    <div class="hidden md:flex md:flex-shrink-0">
      <div class="flex flex-col w-64 bg-white shadow-lg">
        <div class="flex items-center justify-center h-20 px-4 border-b border-gray-200">
          <h1 class="text-xl font-bold text-purple-700">campAlyze</h1>
        </div>
        <div class="flex flex-col flex-grow p-4 overflow-y-auto">
          <nav class="flex-1 space-y-2">
            <a
              href="/dashboard"
              class="flex items-center px-4 py-3 text-sm font-medium text-white bg-purple-600 rounded-md"
            >
              <Home className="w-5 h-5 mr-3 text-white" />
              Dashboard
            </a>
            <a
              href="/imports-upload"
              class="flex items-center px-4 py-3 text-sm font-medium text-gray-700 rounded-md hover:bg-gray-100 hover:text-purple-600"
            >
              <Upload className="w-5 h-5 mr-3 text-gray-400 group-hover:text-purple-500" />
              Importuj dane
            </a>
            <a
              href="/imports"
              class="flex items-center px-4 py-3 text-sm font-medium text-gray-700 rounded-md hover:bg-gray-100 hover:text-purple-600"
            >
              <Download className="w-5 h-5 mr-3 text-gray-400 group-hover:text-purple-500" />
              Moje importy
            </a>
            <a
              href="/kampanie"
              class="flex items-center px-4 py-3 text-sm font-medium text-gray-600 rounded-md hover:bg-gray-100"
            >
              <LineChart className="w-5 h-5 mr-3 text-gray-500" />
              Kampanie
            </a>
            <a
              href="/dziennik-zmian"
              class="flex items-center px-4 py-3 text-sm font-medium text-gray-600 rounded-md hover:bg-gray-100"
            >
              <CalendarIconLucide className="w-5 h-5 mr-3 text-gray-500" />
              Dziennik Zmian
            </a>
            <a
              href="/alerty"
              class="flex items-center px-4 py-3 text-sm font-medium text-gray-600 rounded-md hover:bg-gray-100"
            >
              <Bell className="w-5 h-5 mr-3 text-gray-500" />
              Alerty
            </a>
            <a
              href="/eksport"
              class="flex items-center px-4 py-3 text-sm font-medium text-gray-600 rounded-md hover:bg-gray-100"
            >
              <Download className="w-5 h-5 mr-3 text-gray-500" />
              Eksport Danych
            </a>
            <a
              href="/ai-insights"
              class="flex items-center px-4 py-3 text-sm font-medium text-gray-600 rounded-md hover:bg-gray-100"
            >
              <BrainCircuit className="w-5 h-5 mr-3 text-gray-500" />
              AI Insights
            </a>
          </nav>
        </div>
      </div>
    </div>

    <!-- Główna zawartość -->
    <div class="flex flex-col flex-1 overflow-hidden">
      <!-- Nagłówek -->
      <header class="flex items-center justify-between p-4 bg-white shadow-sm">
        <div class="flex md:hidden">
          <button type="button" class="text-gray-500 hover:text-gray-600">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="w-6 h-6"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
            </svg>
          </button>
        </div>
        <div class="flex items-center">
          <span class="text-sm font-medium text-gray-700">Witaj, {userFullName}</span>
        </div>
        <div class="flex items-center">
          <form method="POST" action="/api/auth/signout">
            <Button type="submit" variant="outline" size="sm" className="flex items-center"> Wyloguj się </Button>
          </form>
        </div>
      </header>

      <!-- Zawartość dashboardu -->
      <main class="flex-1 overflow-y-auto p-6 bg-gray-100">
        <div class="max-w-7xl mx-auto">
          <!-- Status MVP -->
          {
            error && (
              <div class="mb-8">
                <Alert>
                  <div class="flex items-center">
                    <AlertTriangle className="h-4 w-4 mr-2" />
                    <p class="text-sm text-red-500">Błąd: {error}</p>
                  </div>
                </Alert>
              </div>
            )
          }

          <!-- Filtry i akcje -->
          <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-8 gap-4">
            <div class="flex flex-wrap gap-2">
              <Button size="sm" variant="outline" className="bg-white">
                <CalendarIconLucide className="h-4 w-4 mr-2" />
                {formattedDateRange}
              </Button>
              <Button size="sm" variant="outline" className="bg-white">
                {metricsData?.filtersApplied?.platform ? metricsData.filtersApplied.platform : "Wszystkie platformy"}
              </Button>
              <Button size="sm" variant="outline" className="bg-white">
                <Settings className="h-4 w-4 mr-2" />
                Filtry
              </Button>
            </div>
            <div class="flex gap-2">
              <a
                href="/imports-upload"
                class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 bg-purple-600 text-primary-foreground shadow hover:bg-purple-700 h-9 px-4 py-2"
              >
                <Upload className="h-4 w-4 mr-2" />
                Importuj dane
              </a>
              <a href="/ai-insights">
                <Button size="sm" variant="outline" className="bg-white">
                  <BrainCircuit className="h-4 w-4 mr-2" />
                  Generuj raport AI
                </Button>
              </a>
            </div>
          </div>

          <!-- Filtry -->
          <div class="mb-6 p-4 bg-white rounded-lg shadow">
            <h3 class="mb-3 text-lg font-semibold text-gray-700">Filtry</h3>
            <div class="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-2 xl:grid-cols-4">
              {
                /* <div class="flex flex-col space-y-1">
                <label for="dateFrom" class="text-sm font-medium text-gray-700">Data od:</label>
                <DatePicker client:load date={new Date(dateFromState)} paramName="dateFrom" />
              </div>
              <div class="flex flex-col space-y-1">
                <label for="dateTo" class="text-sm font-medium text-gray-700">Data do:</label>
                <DatePicker client:load date={new Date(dateToState)} paramName="dateTo" />
              </div> */
              }
              <div class="flex flex-col space-y-1">
                <label for="platform" class="text-sm font-medium text-gray-700">Platforma:</label>
                <DropdownSelect
                  client:load
                  options={platformOptions}
                  value={selectedPlatformState}
                  paramName="platform"
                  placeholder="Wybierz platformę"
                />
              </div>
              <div class="flex flex-col space-y-1">
                <label for="campaign" class="text-sm font-medium text-gray-700">Kampania:</label>
                <DropdownSelect
                  client:load
                  options={campaignOptions}
                  value={selectedCampaignState}
                  paramName="campaign"
                  placeholder="Wybierz kampanię"
                />
              </div>
            </div>
          </div>

          <!-- Metryki -->
          <div class="mb-8">
            <h2 class="text-lg font-semibold text-gray-700 mb-4">Kluczowe metryki</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-sm font-medium text-gray-500">CPC</CardTitle>
                </CardHeader>
                <CardContent>
                  <div class="flex items-baseline">
                    <span class="text-2xl font-bold">{metrics.cpc.value}</span>
                    <span
                      class={`ml-2 text-xs font-medium ${metrics.cpc.change.startsWith("+") ? "text-red-500" : "text-green-500"}`}
                    >
                      {metrics.cpc.change}
                    </span>
                  </div>
                </CardContent>
              </Card>
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-sm font-medium text-gray-500">CTR</CardTitle>
                </CardHeader>
                <CardContent>
                  <div class="flex items-baseline">
                    <span class="text-2xl font-bold">{metrics.ctr.value}</span>
                    <span
                      class={`ml-2 text-xs font-medium ${metrics.ctr.change.startsWith("+") ? "text-green-500" : "text-red-500"}`}
                    >
                      {metrics.ctr.change}
                    </span>
                  </div>
                </CardContent>
              </Card>
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-sm font-medium text-gray-500">Konwersje</CardTitle>
                </CardHeader>
                <CardContent>
                  <div class="flex items-baseline">
                    <span class="text-2xl font-bold">{metrics.konwersje.value}</span>
                    <span
                      class={`ml-2 text-xs font-medium ${metrics.konwersje.change.startsWith("+") ? "text-green-500" : "text-red-500"}`}
                    >
                      {metrics.konwersje.change}
                    </span>
                  </div>
                </CardContent>
              </Card>
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-sm font-medium text-gray-500">Koszt/Konwersję</CardTitle>
                </CardHeader>
                <CardContent>
                  <div class="flex items-baseline">
                    <span class="text-2xl font-bold">{metrics.kosztKonwersji.value}</span>
                    <span
                      class={`ml-2 text-xs font-medium ${metrics.kosztKonwersji.change.startsWith("+") ? "text-red-500" : "text-green-500"}`}
                    >
                      {metrics.kosztKonwersji.change}
                    </span>
                  </div>
                </CardContent>
              </Card>
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-sm font-medium text-gray-500">ROAS</CardTitle>
                </CardHeader>
                <CardContent>
                  <div class="flex items-baseline">
                    <span class="text-2xl font-bold">{metrics.roas.value}</span>
                    <span
                      class={`ml-2 text-xs font-medium ${metrics.roas.change.startsWith("+") ? "text-green-500" : "text-red-500"}`}
                    >
                      {metrics.roas.change}
                    </span>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>

          <!-- Przegląd platform -->
          <div class="mb-8">
            <PlatformTabs client:load timeSeriesData={metricsData?.timeSeriesData || []} />
          </div>

          <!-- Alerty i weryfikacje -->
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <!-- Alerty -->
            <div>
              <div class="flex justify-between items-center mb-4">
                <h2 class="text-lg font-semibold text-gray-700">Alerty kampanii</h2>
                <a href="/alerty" class="text-sm text-purple-600 hover:text-purple-700">Zobacz wszystkie</a>
              </div>
              <Card>
                <CardContent className="p-0">
                  {
                    alerts.length > 0 ? (
                      <ul class="divide-y divide-gray-200">
                        {alerts.map((alert) => (
                          <li class="p-4 hover:bg-gray-50">
                            <div class="flex items-start">
                              <div
                                class={`flex-shrink-0 h-3 w-3 rounded-full mt-1 ${alert.severity === "high" ? "bg-red-500" : alert.severity === "medium" ? "bg-yellow-500" : "bg-blue-500"}`}
                              />
                              <div class="ml-3">
                                <p class="text-sm font-medium text-gray-900">{alert.campaign}</p>
                                <p class="text-xs text-gray-500">
                                  {alert.platform} | {alert.issue}: {alert.value} (próg: {alert.threshold})
                                </p>
                              </div>
                            </div>
                          </li>
                        ))}
                      </ul>
                    ) : (
                      <div class="flex items-center justify-center h-40 bg-gray-50">
                        <div class="text-center">
                          <p class="text-sm text-gray-500">Brak alertów dla kampanii.</p>
                        </div>
                      </div>
                    )
                  }
                </CardContent>
              </Card>
            </div>

            <!-- Nadchodzące weryfikacje -->
            <div>
              <div class="flex justify-between items-center mb-4">
                <h2 class="text-lg font-semibold text-gray-700">Nadchodzące weryfikacje</h2>
                <a href="/dziennik-zmian" class="text-sm text-purple-600 hover:text-purple-700">Zobacz wszystkie</a>
              </div>
              <Card>
                <CardContent className="p-0">
                  {
                    upcomingVerifications.length > 0 ? (
                      <ul class="divide-y divide-gray-200">
                        {upcomingVerifications.map((verification) => (
                          <li class="p-4 hover:bg-gray-50">
                            <div class="flex items-start">
                              <div class="flex-shrink-0">
                                <Clock className="h-5 w-5 text-gray-400" />
                              </div>
                              <div class="ml-3">
                                <p class="text-sm font-medium text-gray-900">{verification.campaign}</p>
                                <p class="text-xs text-gray-500">
                                  {verification.platform} | {verification.change}
                                </p>
                                <p class="text-xs text-gray-500 mt-1">
                                  Weryfikacja: {new Date(verification.verification).toLocaleDateString("pl-PL")}
                                </p>
                              </div>
                            </div>
                          </li>
                        ))}
                      </ul>
                    ) : (
                      <div class="flex items-center justify-center h-40 bg-gray-50">
                        <div class="text-center">
                          <p class="text-sm text-gray-500">Brak nadchodzących weryfikacji.</p>
                        </div>
                      </div>
                    )
                  }
                </CardContent>
              </Card>
            </div>
          </div>
        </div>
      </main>
    </div>
  </div>
</Layout>

<script>
  if (typeof window !== "undefined") {
    const urlParams = new URLSearchParams(window.location.search);
    const pendingImportId = urlParams.get("pendingImportId");

    if (pendingImportId) {
      const notificationContainerId = "import-processing-notification";

      const removeProcessingMessage = () => {
        const notification = document.getElementById(notificationContainerId);
        if (notification) {
          notification.remove();
        }
      };

      const showErrorAlert = (message: string) => {
        removeProcessingMessage();
        alert(`Błąd importu: ${message}`);
        urlParams.delete("pendingImportId");
        window.history.replaceState({}, document.title, `${window.location.pathname}?${urlParams.toString()}`);
      };

      // Display initial processing message
      (() => {
        let notification = document.getElementById(notificationContainerId);
        if (!notification) {
          notification = document.createElement("div");
          notification.id = notificationContainerId;
          notification.style.position = "fixed";
          notification.style.bottom = "20px";
          notification.style.right = "20px";
          notification.style.padding = "15px";
          notification.style.backgroundColor = "#6B21A8"; // purple-700
          notification.style.color = "white";
          notification.style.borderRadius = "8px";
          notification.style.boxShadow = "0 4px 6px rgba(0,0,0,0.1)";
          notification.style.zIndex = "1000";
          notification.innerHTML = `
            <div style="display: flex; align-items: center;">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-loader-2" style="margin-right: 10px; animation: spin 2s linear infinite;">
                <path d="M21 12a9 9 0 1 1-6.219-8.56"/>
              </svg>
              Trwa przetwarzanie importu danych... Dashboard zostanie odświeżone po zakończeniu.
            </div>
          `;
          document.body.appendChild(notification);
        }
      })();

      const startTime = Date.now();
      const MAX_POLL_DURATION = 5 * 60 * 1000;
      const POLL_INTERVAL = 5000;

      const pollingFunction = async () => {
        const now = Date.now();
        if (now - startTime > MAX_POLL_DURATION) {
          clearInterval(pollTimerId);
          showErrorAlert("Przekroczono maksymalny czas oczekiwania na zakończenie importu.");
          return;
        }

        try {
          const response = await fetch(`/api/imports/${pendingImportId}/status`);
          if (!response.ok) {
            if (response.status >= 400 && response.status < 500) {
              const errorData = await response.json();
              console.error("Błąd statusu importu (klient):", errorData.message || response.statusText);
              showErrorAlert(errorData.message || "Nie udało się pobrać statusu importu.");
            } else {
              console.error("Błąd serwera podczas sprawdzania statusu importu:", response.statusText);
              showErrorAlert("Błąd serwera podczas sprawdzania statusu importu.");
            }
            clearInterval(pollTimerId);
            return;
          }

          const data = await response.json();

          if (data.status === "completed") {
            clearInterval(pollTimerId);
            removeProcessingMessage();
            urlParams.delete("pendingImportId");
            window.history.replaceState({}, document.title, `${window.location.pathname}?${urlParams.toString()}`);
            window.location.reload();
          } else if (data.status === "failed") {
            clearInterval(pollTimerId);
            console.error("Import nie powiódł się:", data.message || "Brak szczegółów błędu.");
            showErrorAlert(data.message || "Import zakończony niepowodzeniem.");
          } else if (data.status === "pending") {
            console.log("Import w toku, status:", data.status);
          } else {
            clearInterval(pollTimerId);
            console.error("Nieznany status importu:", data.status);
            showErrorAlert("Otrzymano nieznany status importu.");
          }
        } catch (error) {
          clearInterval(pollTimerId);
          console.error("Błąd podczas pollingu statusu importu:", error);
          showErrorAlert("Wystąpił błąd podczas komunikacji z serwerem w celu sprawdzenia statusu importu.");
        }
      };

      // Initial check immediately
      pollingFunction();
      // Then set interval

      const pollTimerId = setInterval(pollingFunction, POLL_INTERVAL);
    }
  }

  const style = document.createElement("style");
  style.innerHTML = `
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
  `;
  document.head.appendChild(style);
</script>
